from typing import List
from abc import ABCMeta, abstractmethod
from ctypes import *
from z3 import *
from random import choice
from gadget_template import *


ALLOWED_BIT = [8, 16, 32]

class exploit_gadget:
    __metaclass__ = ABCMeta

    def __init__(self):
        pass

    def generate(self, constraint):
        pass

'''
Greater than
'''
class Constraint_GT(exploit_gadget):
    def overflow(self, constraint):
        constraint = simplify(constraint)
        var = constraint.arg(1)
        cons_value = constraint.arg(0)
        nbit = var.size()
        if nbit not in ALLOWED_BIT:
            return
        template = gadget_template["flag_start"] + \
                    gadget_template["overflow_"+str(nbit)] + \
                    gadget_template["flag_end"] 
        print(constraint, cons_value)
        tmp = cons_value.as_long() + 1
        if tmp > (1<<(nbit-1)):
            tmp = tmp - (1<<(nbit)) 
            template += gadget_template["pos_var_filter"]
        else:
            template += gadget_template["neg_var_filter"]

        cons_value = (1<<(nbit-1)) - tmp

        codes = template.format(tmp1_name = self.tmp_prefix+"_"+str(self.cnt),
                                var_name = str(var),
                                cons_value = str(cons_value))
                                
        self.cnt += 1

        return codes 

    def __init__(self):
        self.gadgets = [self.overflow]
        self.tmp_prefix="GT"
        self.cnt = 0

    def generate(self, constraint):
        constraint = simplify(constraint)
        
        if not isinstance(constraint, BoolRef):
            return 
        if str(constraint.decl()) == "Not":
            return
            #constraint = simplify(constraint.arg(0).arg(0) <= constraint.arg(0).arg(1) +1) 
        elif str(constraint.decl()) == "<=":
            constraint = simplify(constraint.arg(0)-1 <= constraint.arg(1)) 


        gadget = choice(self.gadgets)
        
        codes = gadget(constraint)
        return codes

'''
Less than
'''
class Constraint_LT(exploit_gadget):
    def underflow(self, constraint):
        constraint = simplify(constraint)
    
        var = constraint.arg(0)
        cons_value = constraint.arg(1)
        
        nbit = var.size()

        if nbit not in ALLOWED_BIT:
            return
        template = gadget_template["flag_start"] + \
                    gadget_template["underflow_"+str(nbit)] + \
                    gadget_template["flag_end"] 

        tmp = cons_value.as_long()
        if tmp > (1<<(nbit-1)):
            tmp = tmp - (1<<(nbit)) 
            template += gadget_template["neg_var_filter"]
        else:
            template += gadget_template["pos_var_filter"]

        cons_value = (1<<(nbit-1)) + tmp
        codes = template.format(tmp1_name = self.tmp_prefix+"_"+str(self.cnt),
                                var_name = str(var),
                                cons_value = str(cons_value))
        self.cnt += 1

        return codes 
    
    def __init__(self):
        self.gadgets = [self.underflow]
        self.tmp_prefix="LT"
        self.cnt = 0

    def generate(self, constraint):
        constraint = simplify(constraint)
        if not isinstance(constraint, BoolRef):
            return 
        if str(constraint.decl()) == "Not":
            return
            #constraint = simplify(constraint.arg(0).arg(0) >= (constraint.arg(0).arg(1))) 
        elif str(constraint.decl()) == "<=":
            
            constraint = simplify(constraint.arg(0) <= constraint.arg(1) + 1) 
          
        
        gadget = choice(self.gadgets)
        
        codes = gadget(constraint)
        return codes


'''
['__bool__', '__class__', '__copy__', '__deepcopy__', '__del__', '__delattr__', '__dict__', 
'__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', 
'__init_subclass__', '__le__', '__lt__', '__module__', '__mul__', '__ne__', '__new__', '__nonzero__', '__reduce__',
 '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 
 '_repr_html_', 'arg', 'as_ast', 'children', 'ctx_ref', 'decl', 'eq', 'from_string', 'get_id', 'hash', 'num_args', 
 'params', 'serialize', 'sexpr', 'sort', 'sort_kind', 'translate', 'use_pp']
'''

if __name__ == "__main__":
    gt = Constraint_GT()
    lt = Constraint_LT()
    x = BitVec("x", 8)
    #y = BitVec("y", 16)
    cons1 = 56<=x
    #cons2 = 1000>=y
    #k = x<=-98
    print(gt.generate(cons1))
    #print(lt.generate(cons2))

